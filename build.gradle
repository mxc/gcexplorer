

subprojects {
    apply plugin: 'java'
    sourceCompatibility = '1.8'
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    project.ext {
        password=''
    }
    
    ext {
        vendor = 'Jumping Bean'
        appversion = '0.1'
        author = 'Mark Clarke'
        title = 'GCExplorer'
        user = System.getenv()['USER']
    }
    
    repositories {
        mavenCentral()
    }

    configurations {
        provided
    }

    sourceSets {
        main { compileClasspath += configurations.provided }
    }

    dependencies{
        testCompile group: 'junit', name: 'junit', version: '4.11'
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'       
        provided group: 'javax.inject', name: 'javax.inject', version: '1'
    }

    jar {
        manifest {
            attributes  'Created-By': author + ' '+  vendor
            attributes  'Built-By': user
            attributes  'Build-Date': new Date()
            attributes  'Implementation-Version': "${appversion}"
            attributes  'Codebase': 'http://www.javaperformancetuning.co.za'
            attributes  'Application-Name': 'GCExplorer'
        }
    }
    
}

project (':GCExplorerUI'){

    
    ext{
        mainClass = "za.co.jumpingbean.gcexplorer.ui.GCExplorer"
    }
   
    task allinone(type: Jar) {
        
        destinationDir=new File("$buildDir/allinone")
        manifest {
            attributes  'Main-Class': 'za.co.jumpingbean.gcexplorer.ui.GCExplorer'
            attributes  'Implementation-Title': title
            attributes  'Created-By': author + ' '+  vendor
            attributes  'Built-By': user
            attributes  'Build-Date': new Date()
            attributes  'Implementation-Version': "${appversion}"
        }
       

        from {configurations.compile.collect
            { it.isDirectory() ? it : zipTree(it) }
        }        
        with jar
    }
    
    
    //apply from: 'http://dl.bintray.com/content/shemnon/javafx-gradle/0.4.0/javafx.plugin'    
    
    //    javafx{ 
    //        mainClass = "za.co.jumpingbean.gcexplorer.ui.GCExplorer"    
    //        category = 'System'
    //        copyright = 'Copyright (c) 2014 Mark Clarke Jumping Bean'
    //        description = 'A tool for learning about Java memory management.'
    //        licenseType = 'GPL v3'
    //        vendor = 'Jumping Bean <support@jumpingbean.co.za>'
    //        installSystemWide = true
    //        menu = true
    //        shortcut = true
    //
    //        jvmArgs = ['-XX:+AggressiveOpts', '-XX:CompileThreshold=1']
    //        systemProperties = [ 'prism.disableRegionCaching':'true' ]
    //        arguments = ['-l', '--fast']
    //            
    //        releaseKey {
    //            alias = 'release'
    //            //keyPass = '' // provide via command line
    //            keyStore = file('./jumpingbean.jks')
    //            //storePass = ''  // provide via command line
    //        }
    //        signingMode 'release'
    //            
    //            
    //    }
    //    
    dependencies {
        compile project (':GCExplorerService')
        compile project (':GCExplorerPreloader')
        compile project (':GarbageGeneratorApp')
        provided files ('/usr/lib/jvm/java-8-oracle/jre/lib/javaws.jar')
    }
    
    jar {
        manifest {
            attributes  'Main-Class': 'za.co.jumpingbean.gcexplorer.ui.GCExplorer'
            attributes  'Implementation-Title': title
            attributes  'JavaFX-Preloader-Class': 'za.co.jumpingbean.gcexplorer.preloader.GCExplorerSplashScreen'
            attributes  'JavaFX-Version':   '2.2'
            attributes  'Permissions': 'all-permissions'
        }   
    }

    task dist(dependsOn:jar) {
        
        doLast{
            copy{
                from configurations.compile
                into "$buildDir/libs"
                exclude  { details->details.file.name.equals("GarbageGeneratorApp.jar") }
                exclude  { details->details.file.name.equals("GCExplorerUI.jar") }
            }
            
            if (project.ext.password.isEmpty()){
                project.ext.password = System.console().readPassword("\n\$ Enter keystore password: ")
            }
            
            project.exec {
                commandLine "../javafxpackager.sh"
                args "$project.ext.password"
            }
        }
    }
    
}

project (':GCExplorerService'){
    
    dependencies {
        compile project (':GarbageGeneratorApp')
        testCompile group: 'org.javassist', name: 'javassist', version: '3.18.2-GA'
        compile files ('/usr/lib/jvm/java-8-oracle/lib/tools.jar')
    }
    
    jar {
        manifest {
            attributes  'Implementation-Title': 'GCExplorerService'
        }
    }
    
}

project (':GarbageGeneratorApp'){
    sourceCompatibility = '1.6'
    jar {
        manifest {
            attributes "Main-Class":  "za.co.jumpingbean.gc.testapp.GarbageGeneratorApp"
            attributes  'Implementation-Title': 'GarbageGeneratorApp'
            attributes  'Permissions': 'all-permissions'
            attributes  'Application-Name': 'Gargabge Generator App'
            attributes  'Application-Library-Allowable-Codebase': '*' 
            attributes  'Caller-Allowable-Codebase': '*'
            
        }
    }


    task dist(dependsOn:jar) {
         
        doLast {

            if (project.ext.password.isEmpty()){
                project.ext.password = System.console().readPassword("\n\$ Enter keystore password: ")
            }

            project.exec {
                commandLine "../javapackager-garbagegenapp.sh"
                args "$project.ext.password","$project.parent.projectDir"
            }
            
        }
       
    }
    
}


project (':GCExplorerPreloader'){

}